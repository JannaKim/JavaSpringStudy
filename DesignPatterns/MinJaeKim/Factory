팩토리:
솔리드 5원칙은 베이스가 아님
 
 패턴은 개발 아키텍쳐 구조에서 문제가 있을때
 문제 해결의 제시를 주는거지 하상 정답이 아니다.


팩토리 패턴이란.

팩토리 메소드 패턴 : 객체를 생성하기 위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를
만들지는 서브클래스에서 결정하게 만든다. 즉 팩토리 메소드 패턴을 이용하면
클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것.

추상 팩토리 패턴 : 인터페이스를 이용하여 서로 연관된, 또는 의존하는 객체를 구상 클래스를 지정하지 않고도 생성.



팩토리는 객체를 생성해주는 것

인터페이스
개발할 때
특정 객체가 필요할 때:

팩토리 메소드 패턴 기반:





Blue b= new Blue();
어떤 걸 사용하느냐가 관심사가 아니라
로직을 처리하는게 관심사인데

색상을 바꾸는건 어떤 로직에 영향을 주면 안된다


다형성?

Red, Blue 의 gettext를 가져오는건 같은데 색상만 다르지 동작하는 구현체는 같다

이 다형성 떄문에 인터페이스를 만드는 것
implemets Color로.


"나에게 OOP는 메시징, 상태 처리 과정의 지역적 보존과 보호와 은닉, 그리고 모든 것의 극단적인 지연 바인딩 뿐입니다."

처음 객체지향을 만든사람이 한 말.

사용하기 전에는 얘가 뭘로 돼 있는지 모르는 것.

인터페이스로 코드를 짜놨으면 이걸 클래스로 컴파일 했을때는 코드 입장에서 컬러가 블루인지 레드인지 모른다
객체지향에서 추구하는 게 이것.


패턴 사용 목적은 다름

패턴 구현된 아키텍처 구조가 다름

프레임워크? 이미 정해진 틀. 일종의 큰 템플릿 메서드 코드 플로우를 관리하는 주체

라이브러리: 이미 만들어진 함수 를 갖다쓰는것

기능을 구현하냐, 기능을 깔끔한 구조로 구현하냐
토비의 스프링:
DAO 가 있는데 
여러개가 있겠지.
다오 내부에 ID, PW 다 똑같이 들어가 있으면 

